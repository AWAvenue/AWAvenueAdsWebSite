import{_ as a,o as e,c as r,R as o}from"./chunks/framework.emLw3Ecc.js";const _=JSON.parse('{"title":"Clash 与 Adguard 共存","description":"","frontmatter":{},"headers":[],"relativePath":"Coexist.md","filePath":"Coexist.md"}'),t={name:"Coexist.md"},d=o('<p>本教程所用到的所有工具如下：</p><ul><li><a href="https://github.com/MetaCubeX/ClashMetaForAndroid/releases/latest" target="_blank" rel="noreferrer">Clash Meta For Android</a></li><li><a href="https://github.com/MatsuriDayo/NekoBoxForAndroid/releases/latest" target="_blank" rel="noreferrer">NekoBox For Android</a></li><li><a href="https://adguard.com/zh_cn/welcome.html" target="_blank" rel="noreferrer">Adguard</a></li></ul><h1 id="clash-与-adguard-共存" tabindex="-1"><strong>Clash 与 Adguard 共存</strong> <a class="header-anchor" href="#clash-与-adguard-共存" aria-label="Permalink to &quot;**Clash 与 Adguard 共存**&quot;">​</a></h1><h2 id="clash-的设置" tabindex="-1"><strong>Clash 的设置</strong> <a class="header-anchor" href="#clash-的设置" aria-label="Permalink to &quot;**Clash 的设置**&quot;">​</a></h2><ol><li>将 Clash 设置为仅代理模式<br> 关闭设置-网络-自动路由所有流量。</li><li>获取 Clash 代理端口<br> 建议使用复合端口，即配置文件中的 <code>mixed-port</code>，如果没有也可以使用 Socks 端口或 HTTP 端口，也可自行在设置-覆写中填入对应端口，例如 <code>7890</code>。</li><li>获取 DNS 监听服务器<br> 在配置文件中寻找 <code>listen</code>，如果配置文件中没有，自行在设置-覆写-监听中填入，例如 <code>127.0.0.1:1053</code>。</li></ol><h2 id="adguard-的设置" tabindex="-1"><strong>Adguard 的设置</strong> <a class="header-anchor" href="#adguard-的设置" aria-label="Permalink to &quot;**Adguard 的设置**&quot;">​</a></h2><ol><li>设置 DNS 服务器<br> 在防护-DNS保护功能-DNS服务器-自定义服务器中添加上面获取到的 DNS，例如 <code>127.0.0.1:1053</code>。如果提示 DNS 服务器不可用，可到设置-通用-高级设置-低级设置中关闭验证 DNS 上游功能。</li><li>设置代理服务器<br> 在设置-过滤-网络-代理-代理服务器中添加，类型选择代理端口的类型，代理主机填写 <code>127.0.0.1</code>，代理端口填入上面获取的端口。</li></ol><h1 id="nekobox-与-adguard-共存" tabindex="-1"><strong>NekoBox 与 Adguard 共存</strong> <a class="header-anchor" href="#nekobox-与-adguard-共存" aria-label="Permalink to &quot;**NekoBox 与 Adguard 共存**&quot;">​</a></h1><h2 id="nekobox-的设置" tabindex="-1"><strong>NekoBox 的设置</strong> <a class="header-anchor" href="#nekobox-的设置" aria-label="Permalink to &quot;**NekoBox 的设置**&quot;">​</a></h2><ol><li>将 NekoBox 设置为仅代理模式<br> 设置-运行模式改为仅代理。</li><li>获取 NekoBox 代理端口<br> 设置-入站设置-代理端口。</li><li>获取 DNS 监听服务器<br> 设置-入站设置-本地 DNS 的端口。</li><li>路由规则的设置<br> 启用默认规则即可，可看<a href="https://matsuridayo.github.io/nb4a-route" target="_blank" rel="noreferrer">文档</a>自行修改。</li></ol><h2 id="adguard-的设置-1" tabindex="-1"><strong>Adguard 的设置</strong> <a class="header-anchor" href="#adguard-的设置-1" aria-label="Permalink to &quot;**Adguard 的设置**&quot;">​</a></h2><ol><li>设置 DNS 服务器<br> 在防护-DNS保护功能-DNS服务器-自定义服务器中添加上面获取到的 DNS，例如 <code>127.0.0.1:6450</code>。如果提示 DNS 服务器不可用，可到设置-通用-高级设置-低级设置中关闭验证 DNS 上游功能。</li><li>设置代理服务器<br> 在设置-过滤-网络-代理-代理服务器中添加，类型选择代理端口的类型，代理主机填写 <code>127.0.0.1</code>，代理端口填入上面获取的端口。</li></ol><p>其余代理软件与 Adguard 的共存方法类似，都是把 Adguard 的 DNS 服务器设置为代理软件本地的 DNS 服务器，Adguard 的代理服务器设置为代理软件的代理端口。代理软件负责分流，Adguard 决定软件走不走代理。</p>',13),l=[d];function i(s,n,h,c,u,g){return e(),r("div",null,l)}const N=a(t,[["render",i]]);export{_ as __pageData,N as default};
